import React, {useEffect, useState, useRef} from "react";
import { useNavigate } from 'react-router-dom';
import axios from "axios";
import SockJS from "sockjs-client";
import { Client } from "@stomp/stompjs";
import * as XLSX from "xlsx";
import QRCode from "react-qr-code";
import { motion, AnimatePresence } from "framer-motion";

//‚úÖ zustand store import
import { useMatchStore } from "../stores/useMatchStore";
import { useScoreStore } from "../stores/useScoreStore";
import { useQRStore } from "../stores/useQRStore";
import type { RoundScore, JudgeScore } from "../stores/useScoreStore";
import type { Match } from "../stores/useMatchStore";

//‚úÖ ÏïÑÏù¥ÏΩò
import { ChevronDown } from "lucide-react";


const Adminpage: React.FC = () => {
    
    //‚úÖ zustand ÏÉÅÌÉú Ï†ÅÏö©
    const { matches, setMatches, currentIndex, setCurrentIndex } = useMatchStore();
    const { roundScores, setRoundScores, currentRoundIndex, setCurrentRoundIndex, scoreStatus, setScoreStatus } = useScoreStore();
    const { showQRButton, setShowQRButton, qrGenerated, setQrGenerated, isPasswordSet, setIsPasswordSet, accessCode, setAccessCode,  isFileUploaded, setIsFileUploaded } = useQRStore();
    
    //‚úÖ ÏùºÎ∞ò
    const [showQR, setShowQR] = useState(false);
    const [file, setFile] = useState<File | null>(null);
    const [sheetNames, setSheetNames] = useState<string[]>([]);
    const [selectedSheet, setSelectedSheet] = useState<number | null>(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [showPasswordModal, setShowPasswordModal] = useState(false);
    const [password, setPassword] = useState<string>("");
    const [judgeCount, setJudgeCount] = useState<number | null>(null);
    const [judgeName, setJudgeName] = useState<string[]>([]);
    const [judgeQRList, setJudgeQRList] = useState<{ name: string; deviceId: string }[]>([]);
    const [isReconnected, setIsReconnected] = useState(false);
    const initializedOnceRef = useRef(false);



    //‚úÖ Ï†ÑÏó≠ÏúºÎ°ú Ïì∞Ïù¥Îäî ÏΩîÎìúÎìú
    const baseURL = import.meta.env.VITE_API_BASE_URL;
    const current = matches[currentIndex];
    const navigate = useNavigate();

    //‚úÖ Î†àÎìú, Î∏îÎ£® Ï¥ùÌï© Íµ¨ÌïòÍ∏∞
    const redTotal = roundScores.reduce((sum, round) => {
        const allSubmitted = round.judges.length > 0 && round.judges.every(j => j.submitted);
        if (!allSubmitted) return sum;
        const redSum = round.judges.reduce((r, judge) => r + (judge.red ?? 0), 0);
        return sum + redSum;
      }, 0);
      
    const blueTotal = roundScores.reduce((sum, round) => {
        const allSubmitted = round.judges.length > 0 && round.judges.every(j => j.submitted);
        if (!allSubmitted) return sum;
        const blueSum = round.judges.reduce((b, judge) => b + (judge.blue ?? 0), 0);
        return sum + blueSum;
    }, 0);

            
    //‚úÖ fetchInitialData Ìï®Ïàò ÏûêÎèô Ïã§Ìñâ
    useEffect(() => {
        fetchInitialData();
    }, []);

    //‚úÖ QR Ï†ïÎ≥¥Î•º ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞(ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞, Ïã¨Ìåê, deviceId Îì±)
    useEffect(() => {
        const currentMatchId = matches[currentIndex]?.id;

        // üî¥ Îß§Ïπò ÏóÜÏúºÎ©¥ ÏöîÏ≤≠ ÏïàÌï®
        if (!currentMatchId) return;
      
        axios.get(`${baseURL}/api/progress/${currentMatchId}/qr-generated`)
          .then((res) => {
            console.log("‚úÖ QR ÏÉÅÌÉú Î≥µÏõê:", res.data);
            if (res.data.qrGenerated) {
              setQrGenerated(true);
              setShowQRButton(true);
              setIsPasswordSet(res.data.isPasswordSet);
              if (res.data.accessCode) {
                setAccessCode(res.data.accessCode);
              }
            }
          })
          .catch((error) => {
            console.error("‚ùå QR ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", error);
          });
      }, [matches, currentIndex]); 

    //‚úÖ WebSocket Ïó∞Í≤∞
    useEffect(() => {
        let stompClient: Client;

        const runWebSocket = () => {
            const socket = new SockJS(`${baseURL}/ws`);
            stompClient = new Client({
                webSocketFactory: () => socket,
                reconnectDelay: 5000,
                onConnect: () => {
                    console.log("‚úÖ Î≥∏Î∂ÄÏÑù WebSocket Ïó∞Í≤∞ ÏôÑÎ£å");
                    setIsReconnected(true);
    
                    //üî¥ ÏÑúÎ≤ÑÏóêÏÑú Ï†êÏàò Î∞õÍ∏∞
                    stompClient.subscribe("/topic/messages", (message) => {
                        try{
                            const parsed = JSON.parse(message.body);
                            console.log("‚úÖ Î∞õÏùÄ Ï†êÏàò Ï†ÑÏ≤¥ Î©îÏãúÏßÄ:", parsed);
                            
                            //üî¥ Ïã¨ÌåêÏù¥ Ï†êÏàò 'ÏàòÏ†ïÏ§ë' ÏÉÅÌÉúÎùºÎ©¥
                            if (parsed.status === "MODIFIED") {
                                const roundId = Number(parsed.roundId);
                                const judgeName = parsed.judgeName?.trim(); 
                            
                                setRoundScores(prev =>
                                    prev.map(round => {
                                        if (round.roundId !== roundId) return round;
                                        const updatedJudges = round.judges.map(j =>
                                            j.judgeName.trim() === judgeName
                                                ? { ...j, red: null, blue: null, submitted: false, isConnected: j.isConnected}
                                                : j
                                        );
                                    return { ...round, judges: updatedJudges };
                                    })
                                );
                            }
    
                            if (parsed.status === "JOINED" && parsed.judgeName) {
                                const judgeName = parsed.judgeName.trim();
                            
                                setRoundScores(prev =>
                                    prev.map(round => ({
                                        ...round,
                                        judges: round.judges.map(j =>
                                            j.judgeName.trim() === judgeName
                                                ? { ...j, isConnected: true }
                                                : j
                                        )
                                    }))
                                );
                            }
    
                            //üî¥ Ïã¨Ìåê Ï†ÑÏõêÏùÄ ÎØ∏Ï†úÏ∂ú ÌñàÏßÄÎßå ÏÜåÏàòÎßå Ï†úÏ∂úÌïú ÏÉÅÌô© 
                            if (parsed.status === "WAITING") {
                                const roundId = Number(parsed.roundId);
                                const submittedJudges: { name: string; red: number; blue: number }[] = parsed.submittedJudges ?? [];
                            
                                setRoundScores(prev =>
                                    prev.map(round => {
                                        if (round.roundId !== roundId) return round;
                                        const updatedJudges = round.judges.map(j => {
                                            const found = submittedJudges.find(s => s.name.trim() === j.judgeName.trim());
                                            return found
                                            ? { ...j, submitted: true, red: found.red, blue: found.blue, isConnected: j.isConnected }
                                            : {...j, isConnected: j.isConnected};
                                        });
                                        return { ...round, judges: updatedJudges };
                                    })
                                );
                            }
                            
                            if (parsed.status === "COMPLETE") {
                                const roundId = Number(parsed.roundId);
                                const submittedJudges: { name: string; red: number; blue: number }[] = parsed.submittedJudges ?? [];
                            
                                setRoundScores(prev =>
                                    prev.map(round => {
                                        if (round.roundId !== roundId) return round;
    
                                        const updatedJudges = round.judges.map(j => {
                                            const match = submittedJudges.find(s => s.name.trim() === j.judgeName.trim());
                                            return match
                                            ? { ...j, submitted: true, red: match.red, blue: match.blue, isConnected: j.isConnected }
                                            : { ...j, isConnected: j.isConnected };
                                        });
                                        return { ...round, judges: updatedJudges };
                                    })
                                );
                            
                                setScoreStatus("‚úÖ Ìï©ÏÇ∞ ÏôÑÎ£å!");
                            }
    
                        }catch(e){
                            console.error("‚ùå Î©îÏãúÏßÄ json Î≥ÄÍ≤Ω Ïã§Ìå®:", e);
                        }
                    });
                },
    
                onStompError: (frame) => console.error("‚ùå STOMP ÏóêÎü¨:", frame.headers["message"]),
                onWebSocketError: (event) => console.error("‚ùå WebSocket ÏóêÎü¨:", event)
            });
    
            stompClient.activate();
        };
        runWebSocket();

        return () => {
            if (stompClient) stompClient.deactivate();
          };
    }, []);



    //‚úÖ Ï¥àÍ∏∞ ÎùºÏö¥Îìú ÏàòÎßåÌÅº Ï†êÏàò ÎØ∏Î¶¨ Ï±ÑÏõåÎëêÍ∏∞
    useEffect(() => {
        if (
          matches.length > 0 &&
          roundScores.length === 0 &&
          !initializedOnceRef.current
        ) {
          const currentMatch = matches[currentIndex];
      
          axios.get(`${baseURL}/api/rounds/match/${currentMatch.id}`)
            .then((res) => {
              const roundList = res.data;
              const initialRoundScores: RoundScore[] = roundList.map((round: any) => ({
                roundId: round.id,
                roundNumber: round.roundNumber,
                judges: [],
              }));
              setRoundScores(initialRoundScores);
              initializedOnceRef.current = true;
            });
        }
      }, [matches, currentIndex, roundScores.length]);


    //‚úÖ ÏÉàÎ°úÍ≥†Ïπ® Ïãú Í≤ΩÍ∏∞Î™©Î°ù+Ï†êÏàò+ÏÑ†ÏàòÏ†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchInitialData = async() => {
        try{
            //üî¥ Ï†ÑÏ≤¥ Í≤ΩÍ∏∞ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
            const matchesResponse = await axios.get(`${baseURL}/api/matches`);
            const matches = matchesResponse.data;
            setMatches(matches);

            if(matches.length === 0){
                console.warn("‚ùå Í≤ΩÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
                return;
            }

            //üî¥ Ï≤´ Î≤àÏß∏ Í≤ΩÍ∏∞Î°ú currentIndex 0 ÏÑ§Ï†ï
            const firstMatchId = matches[0].id;
            setCurrentIndex(0);

            //üî¥ ÌòÑÏû¨ matchIdÎ°ú Ï†êÏàò Í∞ÄÏ†∏Ïò§Í∏∞(Í≤ΩÍ∏∞Ïóê ÎßûÎäî Ï†êÏàò)
            const scoresResponse = await axios.get(`${baseURL}/api/scores/by-match`,{
                params: {matchId: firstMatchId},
            });
            const roundScoresFromServer = scoresResponse.data;

            //üî¥ ÌòÑÏû¨ matchIdÎ°ú Ïã¨Ìåê Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞(Í≤ΩÍ∏∞Ïóê ÎßûÎäî Ïã¨Ìåê)
            const judgesResponse = await axios.get(`${baseURL}/api/judges/current`, {
                params: {matchId: firstMatchId},
            });
            const judgeList = judgesResponse.data;

            console.log("‚úÖ Ï¥àÍ∏∞ Î°úÎî©: matches:", matches);
            console.log("‚úÖ Ï¥àÍ∏∞ Î°úÎî©: roundScores:", roundScoresFromServer);
            console.log("‚úÖ Ï¥àÍ∏∞ Î°úÎî©: judgeList:", judgeList);

            const mergedRoundScores = roundScoresFromServer.map((round: any) => ({
                roundId: round.roundId,
                roundNumber: round.roundNumber,
                judges: judgeList.map((judge: any) => ({
                  judgeName: judge.name,
                  red: null,
                  blue: null,
                  submitted: false,
                  isConnected: judge.connected,
                })),
              }));
          
              setRoundScores(mergedRoundScores);
              setScoreStatus("‚è≥ Ï†êÏàò ÎåÄÍ∏∞ Ï§ë...");
        } catch (error) {
            console.error("‚ùå Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:", error);
        }
    };



    //‚úÖ input ÏóëÏÖÄ ÏÑ†ÌÉù Í∏∞Îä•
    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if(e.target.files && e.target.files.length > 0){
            const selectedFile = e.target.files[0];
            setFile(selectedFile);

            //üî¥ ÏãúÌä∏ Ïù¥Î¶Ñ Í∞ÄÏ†∏Ïò§Í∏∞(ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóëÏÖÄ ÏãúÌä∏ ÏÑ†ÌÉù Í∞ÄÎä•)
            const reader = new FileReader();
            reader.onload = (event) => {
                const data = new Uint8Array(event.target?.result as ArrayBuffer);
                const workbook =  XLSX.read(data, { type: "array" });
                const sheetNames = workbook.SheetNames;
                setSheetNames(sheetNames);
            };
            reader.readAsArrayBuffer(selectedFile);
        }
    };

    //‚úÖ Ïï°ÏÖÄ ÏóÖÎ°úÎìú Î≤ÑÌäº
    const handleFileUpload = async () => {

        if (!file) {
            alert("ÏóëÏÖÄ ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!");
            return;
        }
    
        if (selectedSheet === null) {
            alert("ÏãúÌä∏Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!");
            return;
        }
    
        const formData = new FormData();
        formData.append("file", file);
        formData.append("sheet", String(selectedSheet + 1));
        
    
        try {
            await axios.post(`${baseURL}/api/matches/upload`, formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });

            alert("‚úÖ ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ!");

            await fetchInitialData();

            setIsFileUploaded(true);
            setShowQRButton(true);
            setIsModalOpen(false);

        }catch(error:any){
            console.error("‚ùå ÏóÖÎ°úÎìú Ïã§Ìå®:", error);
            console.error("üì• ÏÑúÎ≤Ñ ÏùëÎãµ:", error.response?.data);
        }
    };

    //‚úÖ ÌåùÏóÖÏ∞Ω Ïó¥Í∏∞ Î≤ÑÌäº
    const handleModalOpen = () => {
        if(isFileUploaded){
            const confirmModify = confirm("Ï†ïÎßê ÌååÏùºÏùÑ ÏàòÏ†ïÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
            if (!confirmModify) return;
        }
        setIsModalOpen(true);
    };

    //‚úÖ ÌåùÏïïÏ∞Ω Îã´Í∏∞ Î≤ÑÌäº
    const handleModalClose = () => {
        setIsModalOpen(false);
    };
    
    
    //‚úÖ Îã§Ïùå Í≤ΩÍ∏∞Î°ú Ï†ÑÌôò
    const handleNext = async () => {
        const isLastMatch = currentIndex === matches.length -1;

        if(isLastMatch){
            alert("‚ö†Ô∏è ÌòÑÏû¨ Í≤ΩÍ∏∞Í∞Ä ÎßàÏßÄÎßâ Í≤ΩÍ∏∞ÏûÖÎãàÎã§.");
            return;
        }
        
        const confirmNext = window.confirm("‚ö†Ô∏è Îã§Ïùå Í≤ΩÍ∏∞Î°ú Ïù¥ÎèôÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
        if (!confirmNext) return;

        try {
            const currentMatch = matches[currentIndex];
            const response = await axios.post(`${baseURL}/api/progress/next`, null, {
                params: { currentMatchId: currentMatch.id },
            });
        
            if (response.status === 200) {
                const nextMatchId = response.data?.nextMatchId;
      
            if (nextMatchId) {
              const [matchesRes, roundsRes, judgesRes] = await Promise.all([
                axios.get(`${baseURL}/api/matches`),
                axios.get(`${baseURL}/api/rounds/match/${nextMatchId}`),
                axios.get(`${baseURL}/api/judges/current`, {
                    params:{matchId: nextMatchId},
                }),
              ]);
      
              const allMatches = matchesRes.data;
              const roundList = roundsRes.data;
              const judgeList = judgesRes.data;

              console.log("handlenextÏóêÏÑúÏùò judgelist: ", judgeList);
      
              const nextIndex = allMatches.findIndex((m: Match) => m.id === nextMatchId);
              if (nextIndex === -1) {
                alert("‚ùå Îã§Ïùå Í≤ΩÍ∏∞ IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
                return;
              }
      
              const roundScoresWithJudges: RoundScore[] = roundList.map((round: any) => ({
                roundId: round.id,
                roundNumber: round.roundNumber,
                judges: judgeList.length > 0
                        ? judgeList.map((judge: any) => ({
                            judgeName: judge.name,
                            red: null,
                            blue: null,
                            submitted: false,
                        }))
                        : [],
                }));

      
              setRoundScores(roundScoresWithJudges);

              setMatches(allMatches);
              setCurrentIndex(nextIndex);
      
              setCurrentRoundIndex(0);
              setScoreStatus("‚è≥ Ï†êÏàò ÎåÄÍ∏∞ Ï§ë...");
              setIsReconnected(true);
            }
          } else {
            alert("‚ùå Îã§Ïùå Í≤ΩÍ∏∞Î°ú Ïù¥Îèô Ïã§Ìå®");
          }
        } catch (error) {
          console.error("‚ùå Îã§Ïùå Í≤ΩÍ∏∞ Ï†ÑÌôò Ïò§Î•ò:", error);
          alert("ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        }
      };
      

    //‚úÖ Î™®Îì† ÎùºÏö¥Îìú Ï†êÏàòÎ•º Î∞õÏïÑÏïºÏßÄÎßå 'Îã§Ïùå Í≤ΩÍ∏∞' Î≤ÑÌäº ÌÅ¥Î¶≠ Í∞ÄÎä•
    const isAllScoresSubmitted = () => {
        return roundScores.every(round =>
            round.judges.length > 0 && round.judges.every(judge => judge.submitted)
        );
    };

    //‚úÖ Ïã¨Ìåê ÏûÖÏû• ÎπÑÎ∞ÄÎ≤àÌò∏ ÏßÄÏ†ï Î∞è qr ÏÉùÏÑ±ÏÑ±
    const handleSavePasswordAndGenerateQRs = async () => {
        if(!judgeCount || judgeCount < 1){
            alert("Ïã¨Ìåê ÏàòÎ•º 1Î™Ö Ïù¥ÏÉÅ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!");
            return;
        }

        if(!judgeName.every(name => name.trim() !== "")){
            alert("Î™®Îì† Ïã¨Ìåê Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!");
            return;
        }

        if(password.length !== 4){
            alert("ÎπÑÎ∞ÄÎ≤àÌò∏Îäî Ïà´Ïûê 4ÏûêÎ¶¨Ïó¨Ïïº Ìï©ÎãàÎã§.");
            return;
        }

        try{
            const currentMatch = matches[currentIndex];

            //üî¥ ÏÑúÎ≤ÑÏóê Ïã¨Ìåê Ïù¥Î¶Ñ + ÎπÑÎ∞ÄÎ≤àÌò∏ + matchId Î≥¥ÎÇ¥Í∏∞
            const response = await axios.post(`${baseURL}/api/judge-access/generate-qr`, {
                matchId: currentMatch.id,
                password,
                judgeNames: judgeName,
            });

            const { accessCode, judgeQRList } = response.data;
            setAccessCode(accessCode);
            setJudgeQRList(judgeQRList);

            console.log("‚úÖ ÏÉùÏÑ±Îêú Ïã¨ÌåêÎ≥Ñ QR Î¶¨Ïä§Ìä∏:", judgeQRList);

            //üî¥ match_progress ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏöîÏ≤≠
            await axios.post(`${baseURL}/api/progress/start`, null, {
                params: {
                    matchId: currentMatch.id,
                    judgeCount: judgeCount
                }
            });

            setShowQR(true);
            setShowPasswordModal(false);
            setQrGenerated(true);
            setIsPasswordSet(true);

            alert("‚úÖ ÎπÑÎ∞ÄÎ≤àÌò∏ Îì±Î°ù ÏôÑÎ£å!");
        }catch(error){
            console.error("‚ùå ÎπÑÎ∞ÄÎ≤àÌò∏ Îì±Î°ù Ïã§Ìå®:", error);
            alert("‚ùå ÎπÑÎ∞ÄÎ≤àÌò∏ Îì±Î°ù Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    };

    //‚úÖ DB Î∞è localStorage Ï¥àÍ∏∞Ìôî Î≤ÑÌäº
    const  handleEnd = async () => {
        const confirmEnd = window.confirm("‚ö†Ô∏è Ï†ïÎßê Í≤ΩÍ∏∞ Îç∞Ïù¥ÌÑ∞Î•º Î™®Îëê Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
        if(!confirmEnd) return;

        try{
            //üî¥ ÏÑúÎ≤ÑÏóê Ï¥àÍ∏∞Ìôî ÏöîÏ≤≠
            const response = await axios.post(`${baseURL}/api/progress/end`);

            if(response.status === 200){
                localStorage.removeItem("match-storage");
                localStorage.removeItem("qr-storage");
                localStorage.removeItem("score-storage");
                alert("‚úÖ Î™®Îì† Í≤ΩÍ∏∞ Ï†ïÎ≥¥Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.");
                navigate("/");
                window.location.reload();
            }
        }catch(error:any){
            if(error.response?.status === 400){
                alert("‚ùå ÏïÑÏßÅ ÏãúÏûëÎêú Í≤ΩÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
            } else {
                alert("‚ùå ÏÑúÎ≤Ñ Ïò§Î•ò Î∞úÏÉù. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.");
            }
            console.error("‚ùå Í≤ΩÍ∏∞ Ï¢ÖÎ£å Ïã§Ìå®:", error);
        }
    };
 

    const renderFileUploadSection = () => (
        <>
            <button
                onClick={handleModalOpen}
                className="bg-white text-black px-[65px] py-[20px] text-[30px] font-bold font-sans rounded-full shadow-[0_4px_10px_rgba(0,0,0,0.25)] active:bg-gray-200 active:scale-95 transition-all"
            >
                {isFileUploaded ? "ÌååÏùº ÏàòÏ†ï" : "ÌååÏùº ÏóÖÎ°úÎìú"}
            </button>

            <AnimatePresence>
                {isModalOpen && (
                    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
                        <motion.div
                            initial={{ opacity: 0, scale: 0.9 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0.9 }}
                            transition={{ duration: 0.3 }}
                            className="bg-white p-8 rounded-2xl shadow-2xl w-[90%] max-w-md text-center"
                        >    
                        
                            {/* ÏÉÅÎã® ÌåùÏóÖ Ïù¥Î¶Ñ */}
                            <div className="mb-6 text-2xl font-bold">ÌååÏùº ÏóÖÎ°úÎìú</div>
                            
                            {/* ÌååÏùº ÏóÖÎ°úÎìú */}
                            <div className="mb-4">
                                <input 
                                    type="file"
                                    accept=".xlsx, .xls"
                                    onChange={handleFileChange}
                                    className="block w-full text-sm text-gray-700 border border-gray-300 rounded-lg p-2.5 focus:outline-none focus:ring-2 focus:ring-blue-400"
                                />
                            </div>

                            {/* ÏãúÌä∏ ÏÑ†ÌÉù */}
                            {sheetNames.length > 0 && (
                                <div className="relative w-full mb-4">
                                    <select
                                        onChange={(e) => setSelectedSheet(Number(e.target.value))}
                                        className="w-full p-2.5 pr-10 border border-gray-300 rounded-lg text-gray-700 appearance-none"
                                    >
                                        <option value="">ÏãúÌä∏Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                                        {sheetNames.map((name, idx) => (
                                            <option key={name} value={idx}>{`${idx + 1}Î≤à ÏãúÌä∏: ${name}`}</option>
                                        ))}
                                    </select>

                                    {/* Ïª§Ïä§ÌÖÄ ÌôîÏÇ¥Ìëú Ï∂îÍ∞Ä */}
                                    <div className="absolute inset-y-0 flex items-center pointer-events-none right-3">
                                        <ChevronDown size={20} className="text-gray-400" />
                                    </div>
                                </div>
                            )}    
                            
                            {/* ÌïòÎã® Î≤ÑÌäº */}
                            <div className="flex justify-center mt-6 space-x-4">
                                <button
                                    onClick={handleFileUpload}
                                    className="px-6 py-2 font-bold text-white transition-all bg-blue-500 rounded-full hover:bg-blue-600"
                                >
                                    ÏóÖÎ°úÎìú
                                </button>
                                <button
                                    onClick={handleModalClose}
                                    className="px-6 py-2 font-bold text-gray-700 transition-all bg-white border border-gray-300 rounded-full hover:bg-gray-100"
                                >
                                    Ï∑®ÏÜå
                                </button>
                            </div>
                        </motion.div>
                    </div>
                )}
            </AnimatePresence>
        </>
    );
    //‚úÖ ÏóëÏÖÄ Îì±Î°ùÌïòÍ∏∞ Ï†ÑÏù¥Îùº Í≤ΩÍ∏∞ Ï†ïÎ≥¥Í∞Ä ÏóÜÏùÑ Îïå
    if(matches.length === 0){
        return(
            <div 
                className="relative flex flex-col items-center justify-center w-screen h-screen overflow-hidden bg-center bg-no-repeat bg-cover touch-none"
                style={{backgroundImage: `url('/images/bg_main.jpg')`}}
            >
                {/* Î°úÍ≥† */}
                <div className='absolute top-7 left-6'>
                    <img
                        src='/images/sub_logo.svg'
                        alt='Î©îÏù∏ Î°úÍ≥†'
                        className='w-40 h-auto'
                    />
                </div>

                {/* Ï§ëÏïô Í∏ÄÏûê */}
                <div
                    className="px-4 mb-6 text-[25px] font-sans font-bold text-center text-white"
                    style={{
                        textShadow: "2px 2px 4px rgba(0, 0, 0, 0.5)"
                    }}    
                >
                    ÏïÑÏßÅ ÏóëÏÖÄ ÌååÏùºÏùÑ Î∂àÎü¨Ïò§ÏßÄ ÏïäÏïòÏäµÎãàÎã§.<br/>
                    Í≤ΩÍ∏∞ Ï†ïÎ≥¥Î•º ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî!
                </div>
                    {renderFileUploadSection()}
                </div>
                );
            }
            return(
                <div>
                    <div>
                        {isFileUploaded && currentIndex === 0 && (
                            <span>{renderFileUploadSection()}</span>
                        )}
                    </div>
                    <div>
                        <span>{current.matchNumber}Í≤ΩÍ∏∞</span>
                        <span>{current.division}</span>
                    </div>
                    <div>
                        {current.redName}({current.redGym}) | {current.blueName}({current.blueGym})
                        </div>
            {roundScores.map((round, index) => {
                const redSum = round.judges
                .filter(j => j.submitted)
                .reduce((acc, j) => acc + (j.red ?? 0), 0);
            
                const blueSum = round.judges
                    .filter(j => j.submitted)
                    .reduce((acc, j) => acc + (j.blue ?? 0), 0);

                const allSubmitted = round.judges.length > 0 && round.judges.every(j => j.submitted);      

                return(
                    <div key={round.roundId}>
                        <div>
                            {round.roundNumber}ÎùºÏö¥Îìú: {" "}
                            {allSubmitted ? `${redSum}Ï†ê : ${blueSum}Ï†ê` : "-Ï†ê : -Ï†ê"}
                        </div>
                        <div>
                            {round.judges.length > 0 ? (
                                round.judges.map((judge, idx) => (
                                    <span key={idx}>
                                        {judge.isConnected
                                            ? `${judge.judgeName} ${judge.submitted ? "‚úÖ" : "‚åõ"}`
                                            : "üôã ÎØ∏ÏûÖÏû•"
                                        }
                                    </span>
                                ))
                            ) : (
                                    <div>üèÉÏûÖÏû• ÎåÄÍ∏∞Ï§ë...</div>
                            )}
                             </div>
                    </div>
                );
            })}
            <div>
                <span>Ìï©Í≥Ñ: </span>
                <span>{redTotal}Ï†ê</span>
                <span>{blueTotal}Ï†ê</span>
            </div>
            <button onClick={() => {
                if(!isAllScoresSubmitted()){
                    const proceed = confirm("‚ö†Ô∏è ÏïÑÏßÅ Î™®Îì† Ï†êÏàòÍ∞Ä ÏûÖÎ†•ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. KO Îì± Í≤ΩÍ∏∞ Ï¢ÖÎ£åÎ°ú Îã§Ïùå Í≤ΩÍ∏∞Î°ú Ïù¥ÎèôÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
                    if(!proceed) return;
                }
                handleNext();
            }}>
                Îã§Ïùå Í≤ΩÍ∏∞üëâ
            </button>
            <button onClick={handleEnd}>
                Í≤ΩÍ∏∞ Ï¢ÖÎ£å
            </button>

            {/* ÏïÑÏßÅ QR ÏÉùÏÑ± ÏïàÌñàÏùÑ Îïå */}
            {showQRButton && !isPasswordSet && (
                <div>
                    <button onClick={() => setShowPasswordModal(true)}>üì± Ïã¨ÌåêÏö© QR ÏΩîÎìú ÏÉùÏÑ±</button>   
                    </div>
            )} 
            
            {showPasswordModal && (
                <div>
                    <div>Ïã¨Ìåê ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÑ§Ï†ï</div>

                    {/* Ïã¨Ìåê Ïàò ÏûÖÎ†• */}
                    <label>Ïã¨Ìåê Ïàò: </label>
                    <input
                        type="number"
                        value={judgeCount ?? ""}
                        onChange={(e) => {
                            const count = Number(e.target.value);
                            setJudgeCount(count);
                            setJudgeName(Array(count).fill(""));
                        }}
                        placeholder="Ïã¨Ìåê Ïàò ÏûÖÎ†•"
                    />

                    {/* Ïã¨Ìåê Ïù¥Î¶Ñ ÏûÖÎ†• */}
                    {judgeName.length > 0 && (
                        <div>
                            {judgeName.map((name, index) => (
                                <input
                                    key={index}
                                    type="text"
                                    value={name}
                                    onChange={(e) => {
                                        const newNames = [...judgeName];
                                        newNames[index] = e.target.value;
                                        setJudgeName(newNames);
                                    }}
                                    placeholder="Ïã¨Ìåê Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî."
                                />
                            ))}
                        </div>
                    )}

                    {/* Í≥µÌÜµ ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†• */}
                    <label>ÎπÑÎ∞ÄÎ≤àÌò∏(4ÏûêÎ¶¨ Ïà´Ïûê): </label>
                    <input
                        type="text"
                        value={password}
                        onChange={(e) => {
                            const input = e.target.value;
                            if(/^\d{0,4}$/.test(input)){
                                setPassword(input);
                            }
                        }}
                        placeholder="Ïà´Ïûê 4ÏûêÎ¶¨ ÏûÖÎ†•"
                        maxLength={4}
                    />

                    {/* Ï†ÄÏû• Î≤ÑÌäº */}
                    <button onClick={handleSavePasswordAndGenerateQRs}>ÎπÑÎ∞ÄÎ≤àÌò∏ Îì±Î°ù Î∞è QR ÏÉùÏÑ±</button>
                    </div>
            )}

            {/*QR ÏÉùÏÑ±Ìï¥ÏÑú Î≥¥Ïó¨Ï£ºÍ≥† ÏûàÏùÑ Îïå */}
            {qrGenerated && (
                <div>
                    {judgeQRList.map((judge, index) => {
                    const qrUrl = `${window.location.origin}/judge?accessCode=${accessCode}&deviceId=${judge.deviceId}`;
                    
                    console.log(`‚úÖ [${judge.name}] QR URL: ${qrUrl}`);
                
                    return (
                        <div key={index}>
                        <div>{judge.name}</div>
                        <QRCode 
                            value={qrUrl}
                            size={180}
                        />
                        </div>
                    );
                    })}
                <button onClick={() => setQrGenerated(false)}>‚ùå QR ÏΩîÎìú Îã´Í∏∞</button>
              </div>
            )}

            {/* QR Îã´ÏïòÏßÄÎßå ÏÉùÏÑ±Îêú ÏÉÅÌÉúÎùºÎ©¥ 'Îã§Ïãú Î≥¥Í∏∞' */}
            {!qrGenerated && isPasswordSet && (
            <button onClick={() => setQrGenerated(true)}>
                üîÅ QR ÏΩîÎìú Îã§Ïãú Î≥¥Í∏∞
            </button>
            )}
            </div>
    );
};

export default Adminpage;
